name: 小胡任务系统 CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'xiaohu-jobs'

jobs:
  # 构建和测试任务
  build-and-test:
    name: 构建和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 代码格式检查
      run: |
        echo "检查代码格式..."
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ 代码格式不正确，请运行 'gofmt -s -w .'"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ 代码格式检查通过"
        
    - name: 导入格式检查
      run: |
        echo "检查导入格式..."
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "❌ 导入格式不正确，请运行 'goimports -w .'"
          goimports -l .
          exit 1
        fi
        echo "✅ 导入格式检查通过"
        
    - name: 运行测试
      run: |
        echo "运行单元测试..."
        go test -v -race -coverprofile=coverage.out ./...
        echo "✅ 测试完成"
        
    - name: 生成测试覆盖率报告
      run: |
        go tool cover -func=coverage.out
        go tool cover -html=coverage.out -o coverage.html
        
    - name: 上传测试覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        
    - name: 构建项目
      run: |
        echo "构建项目..."
        go build -v -ldflags="-s -w" -o ${{ env.PROJECT_NAME }} main.go
        echo "✅ 构建完成"
        
    - name: 生成 Swagger 文档
      run: |
        echo "生成 API 文档..."
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g main.go -o docs
        echo "✅ API 文档生成完成"
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ${{ env.PROJECT_NAME }}
          docs/

  # 代码质量检查任务
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 运行 golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
        
    - name: 安全漏洞扫描
      run: |
        echo "扫描安全漏洞..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "⚠️ 发现安全漏洞，请检查并修复"
        echo "✅ 安全扫描完成"

  # 多平台构建任务
  multi-platform-build:
    name: 多平台构建
    runs-on: ubuntu-latest
    needs: build-and-test
    
    strategy:
      matrix:
        platform:
          - name: linux-amd64
            os: linux
            arch: amd64
            ext: ''
          - name: windows-amd64
            os: windows
            arch: amd64
            ext: '.exe'
          - name: darwin-amd64
            os: darwin
            arch: amd64
            ext: ''
            
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 安装依赖
      run: go mod download
      
    - name: 构建 ${{ matrix.platform.name }}
      run: |
        echo "构建 ${{ matrix.platform.name }}..."
        GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} \
        go build -v -ldflags="-s -w" \
        -o ${{ env.PROJECT_NAME }}-${{ matrix.platform.name }}${{ matrix.platform.ext }} main.go
        echo "✅ ${{ matrix.platform.name }} 构建完成"
        
    - name: 上传 ${{ matrix.platform.name }} 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform.name }}-binary
        path: ${{ env.PROJECT_NAME }}-${{ matrix.platform.name }}${{ matrix.platform.ext }}

  # 通知任务（可选）
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, multi-platform-build]
    if: always()
    
    steps:
    - name: 构建状态通知
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && \
           [ "${{ needs.code-quality.result }}" == "success" ] && \
           [ "${{ needs.multi-platform-build.result }}" == "success" ]; then
          echo "🎉 所有任务执行成功！"
          echo "✅ 构建和测试通过"
          echo "✅ 代码质量检查通过"
          echo "✅ 多平台构建完成"
        else
          echo "❌ 部分任务执行失败"
          echo "构建和测试: ${{ needs.build-and-test.result }}"
          echo "代码质量检查: ${{ needs.code-quality.result }}"
          echo "多平台构建: ${{ needs.multi-platform-build.result }}"
          exit 1
        fi 