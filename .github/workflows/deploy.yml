name: 部署到服务器

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'xiaohu-jobs'

jobs:
  # 构建和部署任务
  deploy:
    name: 构建并部署
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 运行测试
      run: go test -v ./...
      
    - name: 构建项目
      run: |
        echo "构建项目..."
        go build -v -ldflags="-s -w" -o ${{ env.PROJECT_NAME }} main.go
        echo "✅ 构建完成"
        
    - name: 生成 Swagger 文档
      run: |
        echo "生成 API 文档..."
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g main.go -o docs
        echo "✅ API 文档生成完成"
        
    - name: 创建部署包
      run: |
        echo "创建部署包..."
        mkdir -p deploy
        cp ${{ env.PROJECT_NAME }} deploy/
        cp -r docs deploy/
        cp -r config deploy/
        cp docker-compose.yml deploy/ || echo "docker-compose.yml 不存在"
        cp Dockerfile deploy/ || echo "Dockerfile 不存在"
        cp README.md deploy/ || echo "README.md 不存在"
        tar -czf ${{ env.PROJECT_NAME }}-deploy.tar.gz deploy/
        echo "✅ 部署包创建完成"
        
    - name: 上传部署包
      uses: actions/upload-artifact@v4
      with:
        name: deploy-package
        path: ${{ env.PROJECT_NAME }}-deploy.tar.gz
        
    # 如果需要部署到服务器，可以添加以下步骤
    # - name: 部署到服务器
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.KEY }}
    #     script: |
    #       cd /path/to/your/app
    #       wget ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts
    #       tar -xzf xiaohu-jobs-deploy.tar.gz
    #       sudo systemctl restart your-service

  # Docker 镜像构建（可选）
  docker-build:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 