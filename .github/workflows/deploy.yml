name: 部署到服务器

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'xiaohu-jobs'
  # Docker 镜像标签配置
  DOCKER_REGISTRY: 'docker.io'  # 可以改为其他镜像仓库
  IMAGE_NAME: 'xiaohu-jobs'
  # 版本标签策略
  VERSION_TAG: ${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
  BUILD_TAG: ${{ github.run_number }}
  COMMIT_TAG: ${{ github.sha }}
  DATE_TAG: ${{ format('YYYYMMDD-HHmmss', github.event.head_commit.timestamp) }}

jobs:
  # 构建和部署任务
  deploy:
    name: 构建并部署
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 运行测试
      run: go test -v ./...
      
    - name: 构建项目
      run: |
        echo "构建项目..."
        go build -v -ldflags="-s -w" -o ${{ env.PROJECT_NAME }} main.go
        echo "✅ 构建完成"
        
    - name: 生成 Swagger 文档
      run: |
        echo "生成 API 文档..."
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g main.go -o docs
        echo "✅ API 文档生成完成"
        
    - name: 创建部署包
      run: |
        echo "创建部署包..."
        mkdir -p deploy
        cp ${{ env.PROJECT_NAME }} deploy/
        cp -r docs deploy/
        cp -r config deploy/
        cp docker-compose.yml deploy/ || echo "docker-compose.yml 不存在"
        cp Dockerfile deploy/ || echo "Dockerfile 不存在"
        cp README.md deploy/ || echo "README.md 不存在"
        tar -czf ${{ env.PROJECT_NAME }}-deploy.tar.gz deploy/
        echo "✅ 部署包创建完成"
        
    - name: 上传部署包
      uses: actions/upload-artifact@v4
      with:
        name: deploy-package
        path: ${{ env.PROJECT_NAME }}-deploy.tar.gz
        
    # 如果需要部署到服务器，可以添加以下步骤
    # - name: 部署到服务器
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.KEY }}
    #     script: |
    #       cd /path/to/your/app
    #       wget ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts
    #       tar -xzf xiaohu-jobs-deploy.tar.gz
    #       sudo systemctl restart your-service

  # Docker 镜像构建（可选）
  docker-build:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 检查 Docker 凭据
      id: check-docker-creds
      run: |
        if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "docker_creds_available=true" >> $GITHUB_OUTPUT
        else
          echo "docker_creds_available=false" >> $GITHUB_OUTPUT
        fi
      
    - name: 设置 Docker Buildx
      if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Docker Hub
      if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 构建并推送 Docker 镜像
      if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.docker-tags.outputs.all_tags }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=小胡任务调度系统
          org.opencontainers.image.version=${{ env.VERSION_TAG }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 跳过 Docker 构建
      if: steps.check-docker-creds.outputs.docker_creds_available == 'false'
      run: |
        echo "⚠️ 跳过 Docker 构建：未配置 DOCKER_USERNAME 和 DOCKER_PASSWORD secrets"
        echo "如需构建 Docker 镜像，请在仓库 Settings → Secrets and variables → Actions 中配置："
        echo "- DOCKER_USERNAME: Docker Hub 用户名"
        echo "- DOCKER_PASSWORD: Docker Hub 密码或访问令牌"
        
    - name: 生成 Docker 标签
      if: steps.check-docker-creds.outputs.docker_creds_available == 'true'
      id: docker-tags
      run: |
        # 基础镜像名称
        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
        
        # 生成各种标签
        LATEST_TAG="${IMAGE_NAME}:latest"
        VERSION_TAG="${IMAGE_NAME}:${{ env.VERSION_TAG }}"
        BUILD_TAG="${IMAGE_NAME}:v${{ env.BUILD_TAG }}"
        COMMIT_TAG="${IMAGE_NAME}:${{ env.COMMIT_TAG }}"
        DATE_TAG="${IMAGE_NAME}:${{ env.DATE_TAG }}"
        
        # 如果是发布版本，添加语义化版本标签
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
          SEMVER_TAG="${IMAGE_NAME}:${VERSION}"
          MAJOR_MINOR="${IMAGE_NAME}:${VERSION%.*}"
          MAJOR="${IMAGE_NAME}:${VERSION%%.*}"
          
          echo "semver_tag=${SEMVER_TAG}" >> $GITHUB_OUTPUT
          echo "major_minor_tag=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          echo "major_tag=${MAJOR}" >> $GITHUB_OUTPUT
        fi
        
        # 输出所有标签
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "build_tag=${BUILD_TAG}" >> $GITHUB_OUTPUT
        echo "commit_tag=${COMMIT_TAG}" >> $GITHUB_OUTPUT
        echo "date_tag=${DATE_TAG}" >> $GITHUB_OUTPUT
        
        # 构建完整的标签列表
        TAGS="${LATEST_TAG}\n${VERSION_TAG}\n${BUILD_TAG}\n${COMMIT_TAG}\n${DATE_TAG}"
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAGS="${TAGS}\n${SEMVER_TAG}\n${MAJOR_MINOR}\n${MAJOR}"
        fi
        
        echo "all_tags<<EOF" >> $GITHUB_OUTPUT
        echo -e "${TAGS}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "生成的标签："
        echo -e "${TAGS}" 