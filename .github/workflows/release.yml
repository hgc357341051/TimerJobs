name: 自动发布 Release

on:
  push:
    tags:
      - 'v*'  # 推送 v 开头的标签时触发

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'xiaohu-jobs'

jobs:
  release:
    name: 构建并发布 Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 运行测试
      run: go test -v ./...
      
    - name: 构建多平台二进制文件
      run: |
        echo "开始构建多平台二进制文件..."
        
        # 定义构建平台
        PLATFORMS=(
          "linux/amd64"
          "linux/arm64"
          "windows/amd64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        # 为每个平台构建
        for platform in "${PLATFORMS[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          
          # 设置文件扩展名
          ext=""
          if [ "$os" = "windows" ]; then
            ext=".exe"
          fi
          
          # 构建文件名
          filename="${{ env.PROJECT_NAME }}-${os}-${arch}${ext}"
          
          echo "构建 $filename..."
          GOOS=$os GOARCH=$arch \
          go build -v -ldflags="-s -w -X main.Version=${{ github.ref_name }}" \
          -o "$filename" main.go
          
          echo "✅ $filename 构建完成 ($(du -h "$filename" | cut -f1))"
        done
        
        echo "所有平台构建完成！"
        echo "构建的文件:"
        ls -lh ${{ env.PROJECT_NAME }}-*
        
    - name: 生成 Swagger 文档
      run: |
        echo "生成 API 文档..."
        go install github.com/swaggo/swag/cmd/swag@latest
        swag init -g main.go -o docs
        echo "✅ API 文档生成完成"
        
    - name: 创建 Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 小胡定时任务系统 ${{ github.ref_name }}
          
          ### 📦 下载说明
          请根据您的操作系统选择对应的二进制文件：
          
          - **Linux x86_64**: `xiaohu-jobs-linux-amd64`
          - **Linux ARM64**: `xiaohu-jobs-linux-arm64`
          - **Windows x64**: `xiaohu-jobs-windows-amd64.exe`
          - **macOS Intel**: `xiaohu-jobs-darwin-amd64`
          - **macOS Apple Silicon**: `xiaohu-jobs-darwin-arm64`
          
          ### 🔧 使用说明
          1. 下载对应您系统的二进制文件
          2. 给文件添加执行权限（Linux/macOS）：`chmod +x xiaohu-jobs-*`
          3. 运行程序：`./xiaohu-jobs-* start`
          
          ### 📋 支持平台
          - **Linux**: amd64, arm64
          - **Windows**: amd64
          - **macOS**: amd64 (Intel), arm64 (Apple Silicon)
          
          ### 📄 包含文件
          - 各平台二进制文件
          - API 文档 (`docs/`)
          
          ### 🔍 更新日志
          查看 [GitHub 提交记录](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) 了解详细更新内容。
        draft: false
        prerelease: false
        
    - name: 上传 Linux amd64 二进制文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xiaohu-jobs-linux-amd64
        asset_name: xiaohu-jobs-linux-amd64
        asset_content_type: application/octet-stream
        
    - name: 上传 Linux arm64 二进制文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xiaohu-jobs-linux-arm64
        asset_name: xiaohu-jobs-linux-arm64
        asset_content_type: application/octet-stream
        
    - name: 上传 Windows amd64 二进制文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xiaohu-jobs-windows-amd64.exe
        asset_name: xiaohu-jobs-windows-amd64.exe
        asset_content_type: application/octet-stream
        
    - name: 上传 macOS Intel 二进制文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xiaohu-jobs-darwin-amd64
        asset_name: xiaohu-jobs-darwin-amd64
        asset_content_type: application/octet-stream
        
    - name: 上传 macOS Apple Silicon 二进制文件
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./xiaohu-jobs-darwin-arm64
        asset_name: xiaohu-jobs-darwin-arm64
        asset_content_type: application/octet-stream

        
    - name: 检查 Release 状态
      if: always()
      run: |
        echo "Release 创建结果: ${{ steps.create_release.outputs.result }}"
        echo "Release URL: ${{ steps.create_release.outputs.url }}"
        echo "Release ID: ${{ steps.create_release.outputs.id }}"
        
        if [ "${{ steps.create_release.outputs.result }}" == "success" ]; then
          echo "✅ GitHub Release 创建成功"
          echo "Release URL: ${{ steps.create_release.outputs.url }}"
        else
          echo "❌ GitHub Release 创建失败"
          echo "请检查权限设置或手动创建 Release"
        fi
        
    - name: 上传构建产物到 Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries-${{ github.ref_name }}
        path: |
          xiaohu-jobs-*
        retention-days: 30 git